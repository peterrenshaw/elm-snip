
          __                           _     
    ___  / /___ ___        _________  (_)___ 
   / _ \/ / __ `__ \______/ ___/ __ \/ / __ \
  /  __/ / / / / / /_____(__  ) / / / / /_/ /
  \___/_/_/ /_/ /_/     /____/_/ /_/_/ .___/ 
                                  /_/      


  A quickly written, hack to replace REPL
  letting me try out elm code functions and 
  data structures. 

  'cause nodejs sucks


2019DEC26
* Records 
-  $ dog
-  > { age = [], name = "Tucker" }
-  $ dog.name
-  > "Tucker"
-  $ dog.age
-  > []
-  $ dog [ "name" ]
-  > The `dog` value is not a function, but it was given 1 argument.
-  $ haveBirthday
-  > <function>
-  $ haveBirtday dog -- change dog.age to integer
-  > { age = 2, name = "Tucker" }
-  $ olderDog
-  > { age = 2, name = "Tucker" }
-  $ olderDog.name
-  > 2
-  # record update syntax
-  $ haveAnotherBirthday dogo
-  > { age = 2, name = "Rex" }

2019DEC24
* done, though:
- 'Your elm.json says this application needs a different version of Elm. It requires 0.19.0, but you are using 0.19.1 right now'
* continue collections of lists
- greetings = ["Hi", "There", "You", "Great", "Big", "Cheeky"]

2019DEC19
* Collections of Lists
- how do I display the type inference of a function, code block?
- No you cannot find types at runtime 'cause Elm has zero support 
  for ^dependent typing^
  <https://stackoverflow.com/questions/36535368/elm-check-the-type-of-a-value>
  <https://en.m.wikipedia.org/wiki/Dependent_type>

- $ greetings
- > ["hi","Hello","Ho"]
- $ empty
- > []


* Static Types, Type Annotation
- not sure elm-snip will be useful, lets see.
-- start
- add 1 1000
- greetings
- moreGreeting
- meaningOfLife
- pie

- let
-   strPi =
-      Debug.toString pie
- in sayHello "pi " ++ strPi

- bottlesOf "Jolt! Cola" 100
+ using Debug.String
- sayHello "pi " ++ strPi
- bottlesOf "Jolt! Cola" 100
+ repeated after changing Debug.String to String.fromInt

-- end


2019DEC18
* Partial and Full application: functions, variables and anonymous funcs 
- Snippet.person "Jeremy" (Snippet.sayHello "hello")
- sayHigherOrder "Hi" "Elm"
- person "Jeremy" ((\other -> sayHigherOrder "hi" other) "Tucker")
- let
    jeremyOne =
        person "Jeremy" (sayHello "G'day")
  in
    jeremyOne
- jeremyTwo
- tuckerOne "ya old bugger"
- jeremyTwo hello
- hello
- hello "there"
- gday "mate"
- jeremyTwo (gday "mate")
- jeremyTwo (hello "there")

* Lots of trouble trying to use existing code, importing 
  into Snippet.elm.
- don't do this

    {- ========= START snipping away ... add ALL CODE below ======== -}

    ADD CODE BETWEEN THE SNIPPET LINES

    {- ========= END snipping away here ======== -}

- once everything is in Snippet.elm, trouble stopped


* partial application to remove anonymous functions
* ran into error, remmeber to use higher order example, 
  sayHigherOrder instead of sayHello

    import Snippet2019DEC16 exposing (..)
    hi =
      -- full application example
      -- Hi "Elm"
      -- <function> : String -> String
      sayHigherOrder "Hi"
 

* remember to include correct snippet

    import Snippet2019DEC16 exposing (..)

* Currying
- Hi "Elm"


2019DEC16
* Higher order functions
- Programming Elm, Ch1, P3,4,6,7,8,9 
- sayHello
- sayHigherOrder
- sayHigherOrder "Hi" "Elm"
- person "Jeremy" "Tucker"
- personHo "Jeremy" (\other -> sayHigherOrder "Hi" other) "Tucker"
- whatIsHigherOrderFunction "Higher Order Function"
- personHo "Jeremy" (\other -> other ++ ", how are you?") "Tucker"

2019DEC11
* clean up
- must write a script that automates this
* I Want to capitalise words in a list
- then pass that function into map function to work on list of strings
- oh yeah... it works. See <https://github.com/peterrenshaw/elm-snip/blob/master/src/Snippet2019DEC11.elm>

2019DEC06
* Programming Elm, Ch1 P16
* working on:
- types
- type annotation
- saving old snippets as such

  SnippetYYYYMMDD.elm

2019DEC03
* simplist idea I could think of
- we'll see with more complicated snippets if it works
* hack move passing back Debug.toString as text
- will show anything as text
- this should allow visible hacking of code w/o having to resort to 
  the full elm processing loop and init,model,view,update,subs 

2019NOV29
* wrote some docs.
* hack a quick tool to check elm code snippets
* example sources 
 
  https://package.elm-lang.org/packages/elm/random/latest/
  http://learnyouanelm.github.io/pages/02-starting-out.html

* this program uses elm-go, a simple shell script to compile the code
- you don't need it, but I get sick of typing in:

     elm make src/Main.elm 
     elm-format --yes src/Main.elm

- you can find it here:

  <https://github.com/peterrenshaw/elm-go>


# vim: ff=unix:ts=4:sw=4:tw=78:noai:expandtab
